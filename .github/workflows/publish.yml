name: Publish

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (leave empty to use latest tag)"
        required: false
        type: string
      beta:
        description: "Publish as beta (npm --tag=beta)"
        required: false
        type: boolean
        default: false

jobs:
  checks-and-tests:
    name: Run checks and tests
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_info.outputs.version }}
      npm_tag: ${{ steps.version_info.outputs.npm_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.5.x

      - name: Determine version and npm tag
        id: version_info
        run: |
          # Determine the version to use
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
            if [ "${{ github.event.release.prerelease }}" = "true" ]; then
              echo "npm_tag=beta" >> $GITHUB_OUTPUT
            else
              echo "npm_tag=latest" >> $GITHUB_OUTPUT
            fi
          elif [ -n "${{ inputs.tag }}" ]; then
            VERSION="${{ inputs.tag }}"
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
            if [ "${{ inputs.beta }}" = "true" ]; then
              echo "npm_tag=beta" >> $GITHUB_OUTPUT
            else
              echo "npm_tag=latest" >> $GITHUB_OUTPUT
            fi
          else
            echo "Error: No version specified"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION (npm tag: $([ '${{ github.event.release.prerelease }}' = 'true' ] || [ '${{ inputs.beta }}' = 'true' ] && echo 'beta' || echo 'latest'))"

      - name: Run checks
        run: deno task check

      - name: Run tests
        run: deno task test

  publish:
    name: Publish to NPM and JSR (${{ needs.checks-and-tests.outputs.version }}${{ needs.checks-and-tests.outputs.npm_tag == 'beta' && ' [beta]' || '' }})
    runs-on: ubuntu-latest
    needs: checks-and-tests
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.5.x

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 24
          registry-url: https://registry.npmjs.org/

      - name: Bump deno.json version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          jq '.version = "${{ needs.checks-and-tests.outputs.version }}"' deno.json > deno.json.tmp
          mv deno.json.tmp deno.json
          cat deno.json
          git add deno.json
          git commit -m "Bump version to ${{ needs.checks-and-tests.outputs.version }}"
          git push origin main

      - name: Build Node-compatible package
        run: deno task build-npm

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd npm
          npm publish --provenance --access public --tag=${{ needs.checks-and-tests.outputs.npm_tag }}

      - name: Publish to JSR
        run: npx jsr publish

  build-binaries:
    name: Build and upload binaries (${{ needs.checks-and-tests.outputs.version }}${{ needs.checks-and-tests.outputs.npm_tag == 'beta' && ' [beta]' || '' }})
    runs-on: ${{ matrix.os }}
    needs: checks-and-tests
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output: ats-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-apple-darwin
            output: ats-darwin-x86_64
          - os: ubuntu-latest
            target: aarch64-apple-darwin
            output: ats-darwin-aarch64
          - os: ubuntu-latest
            target: x86_64-pc-windows-msvc
            output: ats-windows-x86_64.exe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.5.x

      - name: Compile binary
        run: |
          deno compile \
            --target ${{ matrix.target }} \
            --allow-write \
            --allow-env \
            --allow-read \
            --allow-net \
            --output=${{ matrix.output }} \
            ./src/main.ts

      - name: Determine release tag
        id: release_tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.tag }}" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "Error: No tag specified"
            exit 1
          fi

      - name: Upload binary to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.release_tag.outputs.tag }} ${{ matrix.output }} --clobber

  e2e-smoke-test:
    name: E2E smoke test (${{ needs.checks-and-tests.outputs.version }}${{ needs.checks-and-tests.outputs.npm_tag == 'beta' && ' [beta]' || '' }})
    runs-on: ubuntu-latest
    needs:
      - checks-and-tests
      - build-binaries
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Wait for binaries to be available
        run: |
          echo "Waiting 5 seconds to ensure binaries are fully uploaded and available..."
          sleep 5

      - name: Run E2E smoke test
        run: |
          chmod +x tests/e2e-smoke-test.sh
          ./tests/e2e-smoke-test.sh
